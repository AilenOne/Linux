#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#if 0

int a = 5;

void *Print(void* arg)
{
	//pthread_detach(pthread_self());
	int *b = (int*)arg;
	printf("prindt b is %d\n", *b);
}


int main()
{
	//int a = 5;
	pthread_t ptid;
	if (pthread_create(&ptid, NULL,Print, (int *)&a) !=0)
     {

     printf("pthread create error\n");
         }


     printf("prindt a is %d\n", a);

	pthread_join(ptid, NULL);
	return 0;
}



// unique algorithm example
#include <iostream>     // std::cout
#include <algorithm>    // std::unique, std::distance
#include <vector>       // std::vector

bool myfunction (int i, int j) {
  return (i==j);
}

int main () {
  int myints[] = {10,20,20,20,30,30,20,20,10};           // 10 20 20 20 30 30 20 20 10
  std::vector<int> myvector (myints,myints+9);

  // using default comparison:
  std::vector<int>::iterator it;
  it = std::unique (myvector.begin(), myvector.end());   // 10 20 30 20 10 ?  ?  ?  ?
  

      
  // print out content:
  std::cout << "myvector contains:";
  for (std::vector<int>::iterator iter=myvector.begin(); iter!=myvector.end(); ++iter)
    std::cout << ' ' << *iter;
  std::cout << '\n';                                                 //                ^

  myvector.resize( std::distance(myvector.begin(),it) ); // 10 20 30 20 10


  // print out content:
  std::cout << "myvector contains:";
  for (it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout << ' ' << *it;
  std::cout << '\n';

  // using predicate comparison:
  std::unique (myvector.begin(), myvector.end(), myfunction);   // (no changes)

  // print out content:
  std::cout << "myvector contains:";
  for (it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout << ' ' << *it;
  std::cout << '\n';

  return 0;
}



#include <pthread.h>
#include <stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include <sys/syscall.h>
/* For safe condition variable usage, must use a boolean predicate and  */
/* a mutex with the condition.                                          */
int                 workToDo = 0;
pthread_cond_t      cond  = PTHREAD_COND_INITIALIZER;
pthread_mutex_t     mutex = PTHREAD_MUTEX_INITIALIZER;

#define NTHREADS     3

 static void checkResults(char *string, int rc) {
   if (rc) {
     printf("Error on : %s, rc=%d",
            string, rc);
     exit(EXIT_FAILURE);
   }
   return;
}

void *threadfunc(void *parm)
{
  int           rc;

  while (1) {
    /* Usually worker threads will loop on these operations */
    rc = pthread_mutex_lock(&mutex);
    checkResults("pthread_mutex_lock()\n", rc);

    while (!workToDo) {
      printf("Thread = %d blocked\n" ,pthread_self());
      rc = pthread_cond_wait(&cond, &mutex);
      printf("Thread = %d get cond\n" ,pthread_self());
      checkResults("pthread_cond_wait()\n", rc);
    }
    printf("Thread = %d awake, finish work! \n" ,pthread_self());
    sleep(2);
    /* Under protection of the lock, complete or remove the work     */
    /* from whatever worker queue we have. Here it is simply a flag  */
    workToDo = 0;
    printf("In  mutex lock\n");
    rc = pthread_mutex_unlock(&mutex);
    sleep(2);
    printf("Out mutex lock\n");
    checkResults("pthread_mutex_lock()\n", rc);
  }
  return NULL;
}

int main(int argc, char **argv)
{
  int                   rc=0;
  int                   i;
  pthread_t             threadid[NTHREADS];

  printf("Enter Testcase - %s\n", argv[0]);
#if 0
 rc = pthread_mutex_lock(&mutex);
    checkResults("pthread_mutex_lock()\n", rc);

    /* In the real world, all the threads might be busy, and        */
    /* we would add work to a queue instead of simply using a flag  */
    /* In that case the boolean predicate might be some boolean     */
    /* statement like: if (the-queue-contains-work)                 */
    if (workToDo) {
       printf("Work already present, likely threads are busy\n");
    }
    workToDo = 1;
    //rc = pthread_cond_broadcast(&cond);
    rc = pthread_cond_signal(&cond);
    checkResults("pthread_cond_broadcast()\n", rc);
  printf("pthread_cond_signal - %d\n", rc);
    rc = pthread_mutex_unlock(&mutex);
    checkResults("pthread_mutex_unlock()\n", rc);
    sleep(5);  /* Sleep is not a very robust way to serialize threads */
#endif
  printf("Create %d threads\n", NTHREADS);
  for(i=0; i<NTHREADS; ++i) {
    rc = pthread_create(&threadid[i], NULL, threadfunc, NULL);
    checkResults("pthread_create()\n", rc);
  }

  sleep(5);  /* Sleep is not a very robust way to serialize threads   */

  for(i=0; i<5; ++i) {
    printf("Wake up a worker, work to do...\n");

    rc = pthread_mutex_lock(&mutex);
    checkResults("pthread_mutex_lock()\n", rc);

    /* In the real world, all the threads might be busy, and        */
    /* we would add work to a queue instead of simply using a flag  */
    /* In that case the boolean predicate might be some boolean     */
    /* statement like: if (the-queue-contains-work)                 */
    if (workToDo) {
       printf("Work already present, likely threads are busy\n");
    }
    workToDo = 1;
    //rc = pthread_cond_broadcast(&cond);
    rc = pthread_cond_signal(&cond);
    checkResults("pthread_cond_broadcast()\n", rc);

    rc = pthread_mutex_unlock(&mutex);
    checkResults("pthread_mutex_unlock()\n", rc);
    sleep(5);  /* Sleep is not a very robust way to serialize threads */
  }

  printf("Main completed\n");
  exit(0);
  return 0;
}
#endif


void cleanup(void *arg){
printf("cleanup: %s\n",(char *)arg);
}

void *thr_fn1(void *arg){
printf("thread 1 start\n");
pthread_cleanup_push(cleanup,(void *)"thread 1 first handler\n");
pthread_cleanup_push(cleanup,(void *)"thread 1 second handler\n");
printf("thread 1 push complete\n");
if(arg)
return ((void *)1);
pthread_cleanup_pop(1);
pthread_cleanup_pop(1);
return ((void *)1);
}

void *thr_fn2(void *arg){
printf("thread 2 start\n");
pthread_cleanup_push(cleanup,(void *)"thread 2 first handler\n");
pthread_cleanup_push(cleanup,(void *)"thread 2 second handler\n");
printf("thread 2 push complete\n");
if(arg){
 pthread_exit((void *)2);
}
pthread_cleanup_pop(0); 
pthread_cleanup_pop(0);
//pthread_exit((void *) 2);
}

int main(void){
int err;
pthread_t tid1,tid2;
void * tret;

err = pthread_create(&tid1,NULL,thr_fn1,(void *)1);
if( err != 0){
fprintf(stderr,"create thread1 failed: %s\n",strerror(err));
exit(1);
}

err = pthread_create(&tid2,NULL,thr_fn2,(void *)2);
if(err != 0){
fprintf(stderr,"create thread 2 failed: %s\n",strerror(err));
exit(1);
}

err = pthread_join(tid1,&tret);
if(err != 0){
fprintf(stderr,"thread1 join failed: %s\n",strerror(err));
exit(1);
}
printf("thread 1 exit code %d\n", (long)tret);
err = pthread_join(tid2,&tret);
if(err != 0){
fprintf(stderr,"thread2 join failed: %s",strerror(err));
exit(1);
}
printf("thread 2 exit code %d\n",(long) tret);
exit(0);
}


